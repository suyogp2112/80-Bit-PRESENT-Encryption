// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/16/2018 12:22:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PRESENT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PRESENT_vlg_sample_tst(
	ik0,
	ik1,
	ik2,
	ik3,
	ik4,
	ik5,
	ik6,
	ik7,
	ik8,
	ik9,
	ik10,
	ik11,
	ik12,
	ik13,
	ik14,
	ik15,
	ik16,
	ik17,
	ik18,
	ik19,
	ik20,
	ik21,
	ik22,
	ik23,
	ik24,
	ik25,
	ik26,
	ik27,
	ik28,
	ik29,
	ik30,
	ik31,
	ik32,
	ik33,
	ik34,
	ik35,
	ik36,
	ik37,
	ik38,
	ik39,
	ik40,
	ik41,
	ik42,
	ik43,
	ik44,
	ik45,
	ik46,
	ik47,
	ik48,
	ik49,
	ik50,
	ik51,
	ik52,
	ik53,
	ik54,
	ik55,
	ik56,
	ik57,
	ik58,
	ik59,
	ik60,
	ik61,
	ik62,
	ik63,
	ik64,
	ik65,
	ik66,
	ik67,
	ik68,
	ik69,
	ik70,
	ik71,
	ik72,
	ik73,
	ik74,
	ik75,
	ik76,
	ik77,
	ik78,
	ik79,
	p0,
	p1,
	p2,
	p3,
	p4,
	p5,
	p6,
	p7,
	p8,
	p9,
	p10,
	p11,
	p12,
	p13,
	p14,
	p15,
	p16,
	p17,
	p18,
	p19,
	p20,
	p21,
	p22,
	p23,
	p24,
	p25,
	p26,
	p27,
	p28,
	p29,
	p30,
	p31,
	p32,
	p33,
	p34,
	p35,
	p36,
	p37,
	p38,
	p39,
	p40,
	p41,
	p42,
	p43,
	p44,
	p45,
	p46,
	p47,
	p48,
	p49,
	p50,
	p51,
	p52,
	p53,
	p54,
	p55,
	p56,
	p57,
	p58,
	p59,
	p60,
	p61,
	p62,
	p63,
	sampler_tx
);
input  ik0;
input  ik1;
input  ik2;
input  ik3;
input  ik4;
input  ik5;
input  ik6;
input  ik7;
input  ik8;
input  ik9;
input  ik10;
input  ik11;
input  ik12;
input  ik13;
input  ik14;
input  ik15;
input  ik16;
input  ik17;
input  ik18;
input  ik19;
input  ik20;
input  ik21;
input  ik22;
input  ik23;
input  ik24;
input  ik25;
input  ik26;
input  ik27;
input  ik28;
input  ik29;
input  ik30;
input  ik31;
input  ik32;
input  ik33;
input  ik34;
input  ik35;
input  ik36;
input  ik37;
input  ik38;
input  ik39;
input  ik40;
input  ik41;
input  ik42;
input  ik43;
input  ik44;
input  ik45;
input  ik46;
input  ik47;
input  ik48;
input  ik49;
input  ik50;
input  ik51;
input  ik52;
input  ik53;
input  ik54;
input  ik55;
input  ik56;
input  ik57;
input  ik58;
input  ik59;
input  ik60;
input  ik61;
input  ik62;
input  ik63;
input  ik64;
input  ik65;
input  ik66;
input  ik67;
input  ik68;
input  ik69;
input  ik70;
input  ik71;
input  ik72;
input  ik73;
input  ik74;
input  ik75;
input  ik76;
input  ik77;
input  ik78;
input  ik79;
input  p0;
input  p1;
input  p2;
input  p3;
input  p4;
input  p5;
input  p6;
input  p7;
input  p8;
input  p9;
input  p10;
input  p11;
input  p12;
input  p13;
input  p14;
input  p15;
input  p16;
input  p17;
input  p18;
input  p19;
input  p20;
input  p21;
input  p22;
input  p23;
input  p24;
input  p25;
input  p26;
input  p27;
input  p28;
input  p29;
input  p30;
input  p31;
input  p32;
input  p33;
input  p34;
input  p35;
input  p36;
input  p37;
input  p38;
input  p39;
input  p40;
input  p41;
input  p42;
input  p43;
input  p44;
input  p45;
input  p46;
input  p47;
input  p48;
input  p49;
input  p50;
input  p51;
input  p52;
input  p53;
input  p54;
input  p55;
input  p56;
input  p57;
input  p58;
input  p59;
input  p60;
input  p61;
input  p62;
input  p63;
output sampler_tx;

reg sample;
time current_time;
always @(ik0 or ik1 or ik2 or ik3 or ik4 or ik5 or ik6 or ik7 or ik8 or ik9 or ik10 or ik11 or ik12 or ik13 or ik14 or ik15 or ik16 or ik17 or ik18 or ik19 or ik20 or ik21 or ik22 or ik23 or ik24 or ik25 or ik26 or ik27 or ik28 or ik29 or ik30 or ik31 or ik32 or ik33 or ik34 or ik35 or ik36 or ik37 or ik38 or ik39 or ik40 or ik41 or ik42 or ik43 or ik44 or ik45 or ik46 or ik47 or ik48 or ik49 or ik50 or ik51 or ik52 or ik53 or ik54 or ik55 or ik56 or ik57 or ik58 or ik59 or ik60 or ik61 or ik62 or ik63 or ik64 or ik65 or ik66 or ik67 or ik68 or ik69 or ik70 or ik71 or ik72 or ik73 or ik74 or ik75 or ik76 or ik77 or ik78 or ik79 or p0 or p1 or p2 or p3 or p4 or p5 or p6 or p7 or p8 or p9 or p10 or p11 or p12 or p13 or p14 or p15 or p16 or p17 or p18 or p19 or p20 or p21 or p22 or p23 or p24 or p25 or p26 or p27 or p28 or p29 or p30 or p31 or p32 or p33 or p34 or p35 or p36 or p37 or p38 or p39 or p40 or p41 or p42 or p43 or p44 or p45 or p46 or p47 or p48 or p49 or p50 or p51 or p52 or p53 or p54 or p55 or p56 or p57 or p58 or p59 or p60 or p61 or p62 or p63)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PRESENT_vlg_check_tst (
	c0,
	c1,
	c2,
	c3,
	c4,
	c5,
	c6,
	c7,
	c8,
	c9,
	c10,
	c11,
	c12,
	c13,
	c14,
	c15,
	c16,
	c17,
	c18,
	c19,
	c20,
	c21,
	c22,
	c23,
	c24,
	c25,
	c26,
	c27,
	c28,
	c29,
	c30,
	c31,
	c32,
	c33,
	c34,
	c35,
	c36,
	c37,
	c38,
	c39,
	c40,
	c41,
	c42,
	c43,
	c44,
	c45,
	c46,
	c47,
	c48,
	c49,
	c50,
	c51,
	c52,
	c53,
	c54,
	c55,
	c56,
	c57,
	c58,
	c59,
	c60,
	c61,
	c62,
	c63,
	sampler_rx
);
input  c0;
input  c1;
input  c2;
input  c3;
input  c4;
input  c5;
input  c6;
input  c7;
input  c8;
input  c9;
input  c10;
input  c11;
input  c12;
input  c13;
input  c14;
input  c15;
input  c16;
input  c17;
input  c18;
input  c19;
input  c20;
input  c21;
input  c22;
input  c23;
input  c24;
input  c25;
input  c26;
input  c27;
input  c28;
input  c29;
input  c30;
input  c31;
input  c32;
input  c33;
input  c34;
input  c35;
input  c36;
input  c37;
input  c38;
input  c39;
input  c40;
input  c41;
input  c42;
input  c43;
input  c44;
input  c45;
input  c46;
input  c47;
input  c48;
input  c49;
input  c50;
input  c51;
input  c52;
input  c53;
input  c54;
input  c55;
input  c56;
input  c57;
input  c58;
input  c59;
input  c60;
input  c61;
input  c62;
input  c63;
input sampler_rx;

reg  c0_expected;
reg  c1_expected;
reg  c2_expected;
reg  c3_expected;
reg  c4_expected;
reg  c5_expected;
reg  c6_expected;
reg  c7_expected;
reg  c8_expected;
reg  c9_expected;
reg  c10_expected;
reg  c11_expected;
reg  c12_expected;
reg  c13_expected;
reg  c14_expected;
reg  c15_expected;
reg  c16_expected;
reg  c17_expected;
reg  c18_expected;
reg  c19_expected;
reg  c20_expected;
reg  c21_expected;
reg  c22_expected;
reg  c23_expected;
reg  c24_expected;
reg  c25_expected;
reg  c26_expected;
reg  c27_expected;
reg  c28_expected;
reg  c29_expected;
reg  c30_expected;
reg  c31_expected;
reg  c32_expected;
reg  c33_expected;
reg  c34_expected;
reg  c35_expected;
reg  c36_expected;
reg  c37_expected;
reg  c38_expected;
reg  c39_expected;
reg  c40_expected;
reg  c41_expected;
reg  c42_expected;
reg  c43_expected;
reg  c44_expected;
reg  c45_expected;
reg  c46_expected;
reg  c47_expected;
reg  c48_expected;
reg  c49_expected;
reg  c50_expected;
reg  c51_expected;
reg  c52_expected;
reg  c53_expected;
reg  c54_expected;
reg  c55_expected;
reg  c56_expected;
reg  c57_expected;
reg  c58_expected;
reg  c59_expected;
reg  c60_expected;
reg  c61_expected;
reg  c62_expected;
reg  c63_expected;

reg  c0_prev;
reg  c1_prev;
reg  c2_prev;
reg  c3_prev;
reg  c4_prev;
reg  c5_prev;
reg  c6_prev;
reg  c7_prev;
reg  c8_prev;
reg  c9_prev;
reg  c10_prev;
reg  c11_prev;
reg  c12_prev;
reg  c13_prev;
reg  c14_prev;
reg  c15_prev;
reg  c16_prev;
reg  c17_prev;
reg  c18_prev;
reg  c19_prev;
reg  c20_prev;
reg  c21_prev;
reg  c22_prev;
reg  c23_prev;
reg  c24_prev;
reg  c25_prev;
reg  c26_prev;
reg  c27_prev;
reg  c28_prev;
reg  c29_prev;
reg  c30_prev;
reg  c31_prev;
reg  c32_prev;
reg  c33_prev;
reg  c34_prev;
reg  c35_prev;
reg  c36_prev;
reg  c37_prev;
reg  c38_prev;
reg  c39_prev;
reg  c40_prev;
reg  c41_prev;
reg  c42_prev;
reg  c43_prev;
reg  c44_prev;
reg  c45_prev;
reg  c46_prev;
reg  c47_prev;
reg  c48_prev;
reg  c49_prev;
reg  c50_prev;
reg  c51_prev;
reg  c52_prev;
reg  c53_prev;
reg  c54_prev;
reg  c55_prev;
reg  c56_prev;
reg  c57_prev;
reg  c58_prev;
reg  c59_prev;
reg  c60_prev;
reg  c61_prev;
reg  c62_prev;
reg  c63_prev;

reg  c0_expected_prev;
reg  c1_expected_prev;
reg  c2_expected_prev;
reg  c3_expected_prev;
reg  c4_expected_prev;
reg  c5_expected_prev;
reg  c6_expected_prev;
reg  c7_expected_prev;
reg  c8_expected_prev;
reg  c9_expected_prev;
reg  c10_expected_prev;
reg  c11_expected_prev;
reg  c12_expected_prev;
reg  c13_expected_prev;
reg  c14_expected_prev;
reg  c15_expected_prev;
reg  c16_expected_prev;
reg  c17_expected_prev;
reg  c18_expected_prev;
reg  c19_expected_prev;
reg  c20_expected_prev;
reg  c21_expected_prev;
reg  c22_expected_prev;
reg  c23_expected_prev;
reg  c24_expected_prev;
reg  c25_expected_prev;
reg  c26_expected_prev;
reg  c27_expected_prev;
reg  c28_expected_prev;
reg  c29_expected_prev;
reg  c30_expected_prev;
reg  c31_expected_prev;
reg  c32_expected_prev;
reg  c33_expected_prev;
reg  c34_expected_prev;
reg  c35_expected_prev;
reg  c36_expected_prev;
reg  c37_expected_prev;
reg  c38_expected_prev;
reg  c39_expected_prev;
reg  c40_expected_prev;
reg  c41_expected_prev;
reg  c42_expected_prev;
reg  c43_expected_prev;
reg  c44_expected_prev;
reg  c45_expected_prev;
reg  c46_expected_prev;
reg  c47_expected_prev;
reg  c48_expected_prev;
reg  c49_expected_prev;
reg  c50_expected_prev;
reg  c51_expected_prev;
reg  c52_expected_prev;
reg  c53_expected_prev;
reg  c54_expected_prev;
reg  c55_expected_prev;
reg  c56_expected_prev;
reg  c57_expected_prev;
reg  c58_expected_prev;
reg  c59_expected_prev;
reg  c60_expected_prev;
reg  c61_expected_prev;
reg  c62_expected_prev;
reg  c63_expected_prev;

reg  last_c0_exp;
reg  last_c1_exp;
reg  last_c2_exp;
reg  last_c3_exp;
reg  last_c4_exp;
reg  last_c5_exp;
reg  last_c6_exp;
reg  last_c7_exp;
reg  last_c8_exp;
reg  last_c9_exp;
reg  last_c10_exp;
reg  last_c11_exp;
reg  last_c12_exp;
reg  last_c13_exp;
reg  last_c14_exp;
reg  last_c15_exp;
reg  last_c16_exp;
reg  last_c17_exp;
reg  last_c18_exp;
reg  last_c19_exp;
reg  last_c20_exp;
reg  last_c21_exp;
reg  last_c22_exp;
reg  last_c23_exp;
reg  last_c24_exp;
reg  last_c25_exp;
reg  last_c26_exp;
reg  last_c27_exp;
reg  last_c28_exp;
reg  last_c29_exp;
reg  last_c30_exp;
reg  last_c31_exp;
reg  last_c32_exp;
reg  last_c33_exp;
reg  last_c34_exp;
reg  last_c35_exp;
reg  last_c36_exp;
reg  last_c37_exp;
reg  last_c38_exp;
reg  last_c39_exp;
reg  last_c40_exp;
reg  last_c41_exp;
reg  last_c42_exp;
reg  last_c43_exp;
reg  last_c44_exp;
reg  last_c45_exp;
reg  last_c46_exp;
reg  last_c47_exp;
reg  last_c48_exp;
reg  last_c49_exp;
reg  last_c50_exp;
reg  last_c51_exp;
reg  last_c52_exp;
reg  last_c53_exp;
reg  last_c54_exp;
reg  last_c55_exp;
reg  last_c56_exp;
reg  last_c57_exp;
reg  last_c58_exp;
reg  last_c59_exp;
reg  last_c60_exp;
reg  last_c61_exp;
reg  last_c62_exp;
reg  last_c63_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:64] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 64'b1;
end

// update real /o prevs

always @(trigger)
begin
	c0_prev = c0;
	c1_prev = c1;
	c2_prev = c2;
	c3_prev = c3;
	c4_prev = c4;
	c5_prev = c5;
	c6_prev = c6;
	c7_prev = c7;
	c8_prev = c8;
	c9_prev = c9;
	c10_prev = c10;
	c11_prev = c11;
	c12_prev = c12;
	c13_prev = c13;
	c14_prev = c14;
	c15_prev = c15;
	c16_prev = c16;
	c17_prev = c17;
	c18_prev = c18;
	c19_prev = c19;
	c20_prev = c20;
	c21_prev = c21;
	c22_prev = c22;
	c23_prev = c23;
	c24_prev = c24;
	c25_prev = c25;
	c26_prev = c26;
	c27_prev = c27;
	c28_prev = c28;
	c29_prev = c29;
	c30_prev = c30;
	c31_prev = c31;
	c32_prev = c32;
	c33_prev = c33;
	c34_prev = c34;
	c35_prev = c35;
	c36_prev = c36;
	c37_prev = c37;
	c38_prev = c38;
	c39_prev = c39;
	c40_prev = c40;
	c41_prev = c41;
	c42_prev = c42;
	c43_prev = c43;
	c44_prev = c44;
	c45_prev = c45;
	c46_prev = c46;
	c47_prev = c47;
	c48_prev = c48;
	c49_prev = c49;
	c50_prev = c50;
	c51_prev = c51;
	c52_prev = c52;
	c53_prev = c53;
	c54_prev = c54;
	c55_prev = c55;
	c56_prev = c56;
	c57_prev = c57;
	c58_prev = c58;
	c59_prev = c59;
	c60_prev = c60;
	c61_prev = c61;
	c62_prev = c62;
	c63_prev = c63;
end

// update expected /o prevs

always @(trigger)
begin
	c0_expected_prev = c0_expected;
	c1_expected_prev = c1_expected;
	c2_expected_prev = c2_expected;
	c3_expected_prev = c3_expected;
	c4_expected_prev = c4_expected;
	c5_expected_prev = c5_expected;
	c6_expected_prev = c6_expected;
	c7_expected_prev = c7_expected;
	c8_expected_prev = c8_expected;
	c9_expected_prev = c9_expected;
	c10_expected_prev = c10_expected;
	c11_expected_prev = c11_expected;
	c12_expected_prev = c12_expected;
	c13_expected_prev = c13_expected;
	c14_expected_prev = c14_expected;
	c15_expected_prev = c15_expected;
	c16_expected_prev = c16_expected;
	c17_expected_prev = c17_expected;
	c18_expected_prev = c18_expected;
	c19_expected_prev = c19_expected;
	c20_expected_prev = c20_expected;
	c21_expected_prev = c21_expected;
	c22_expected_prev = c22_expected;
	c23_expected_prev = c23_expected;
	c24_expected_prev = c24_expected;
	c25_expected_prev = c25_expected;
	c26_expected_prev = c26_expected;
	c27_expected_prev = c27_expected;
	c28_expected_prev = c28_expected;
	c29_expected_prev = c29_expected;
	c30_expected_prev = c30_expected;
	c31_expected_prev = c31_expected;
	c32_expected_prev = c32_expected;
	c33_expected_prev = c33_expected;
	c34_expected_prev = c34_expected;
	c35_expected_prev = c35_expected;
	c36_expected_prev = c36_expected;
	c37_expected_prev = c37_expected;
	c38_expected_prev = c38_expected;
	c39_expected_prev = c39_expected;
	c40_expected_prev = c40_expected;
	c41_expected_prev = c41_expected;
	c42_expected_prev = c42_expected;
	c43_expected_prev = c43_expected;
	c44_expected_prev = c44_expected;
	c45_expected_prev = c45_expected;
	c46_expected_prev = c46_expected;
	c47_expected_prev = c47_expected;
	c48_expected_prev = c48_expected;
	c49_expected_prev = c49_expected;
	c50_expected_prev = c50_expected;
	c51_expected_prev = c51_expected;
	c52_expected_prev = c52_expected;
	c53_expected_prev = c53_expected;
	c54_expected_prev = c54_expected;
	c55_expected_prev = c55_expected;
	c56_expected_prev = c56_expected;
	c57_expected_prev = c57_expected;
	c58_expected_prev = c58_expected;
	c59_expected_prev = c59_expected;
	c60_expected_prev = c60_expected;
	c61_expected_prev = c61_expected;
	c62_expected_prev = c62_expected;
	c63_expected_prev = c63_expected;
end



// expected c0
initial
begin
	c0_expected = 1'bX;
end 

// expected c1
initial
begin
	c1_expected = 1'bX;
end 

// expected c2
initial
begin
	c2_expected = 1'bX;
end 

// expected c3
initial
begin
	c3_expected = 1'bX;
end 

// expected c4
initial
begin
	c4_expected = 1'bX;
end 

// expected c5
initial
begin
	c5_expected = 1'bX;
end 

// expected c6
initial
begin
	c6_expected = 1'bX;
end 

// expected c7
initial
begin
	c7_expected = 1'bX;
end 

// expected c8
initial
begin
	c8_expected = 1'bX;
end 

// expected c9
initial
begin
	c9_expected = 1'bX;
end 

// expected c10
initial
begin
	c10_expected = 1'bX;
end 

// expected c11
initial
begin
	c11_expected = 1'bX;
end 

// expected c12
initial
begin
	c12_expected = 1'bX;
end 

// expected c13
initial
begin
	c13_expected = 1'bX;
end 

// expected c14
initial
begin
	c14_expected = 1'bX;
end 

// expected c15
initial
begin
	c15_expected = 1'bX;
end 

// expected c16
initial
begin
	c16_expected = 1'bX;
end 

// expected c17
initial
begin
	c17_expected = 1'bX;
end 

// expected c18
initial
begin
	c18_expected = 1'bX;
end 

// expected c19
initial
begin
	c19_expected = 1'bX;
end 

// expected c20
initial
begin
	c20_expected = 1'bX;
end 

// expected c21
initial
begin
	c21_expected = 1'bX;
end 

// expected c22
initial
begin
	c22_expected = 1'bX;
end 

// expected c23
initial
begin
	c23_expected = 1'bX;
end 

// expected c24
initial
begin
	c24_expected = 1'bX;
end 

// expected c25
initial
begin
	c25_expected = 1'bX;
end 

// expected c26
initial
begin
	c26_expected = 1'bX;
end 

// expected c27
initial
begin
	c27_expected = 1'bX;
end 

// expected c28
initial
begin
	c28_expected = 1'bX;
end 

// expected c29
initial
begin
	c29_expected = 1'bX;
end 

// expected c30
initial
begin
	c30_expected = 1'bX;
end 

// expected c31
initial
begin
	c31_expected = 1'bX;
end 

// expected c32
initial
begin
	c32_expected = 1'bX;
end 

// expected c33
initial
begin
	c33_expected = 1'bX;
end 

// expected c34
initial
begin
	c34_expected = 1'bX;
end 

// expected c35
initial
begin
	c35_expected = 1'bX;
end 

// expected c36
initial
begin
	c36_expected = 1'bX;
end 

// expected c37
initial
begin
	c37_expected = 1'bX;
end 

// expected c38
initial
begin
	c38_expected = 1'bX;
end 

// expected c39
initial
begin
	c39_expected = 1'bX;
end 

// expected c40
initial
begin
	c40_expected = 1'bX;
end 

// expected c41
initial
begin
	c41_expected = 1'bX;
end 

// expected c42
initial
begin
	c42_expected = 1'bX;
end 

// expected c43
initial
begin
	c43_expected = 1'bX;
end 

// expected c44
initial
begin
	c44_expected = 1'bX;
end 

// expected c45
initial
begin
	c45_expected = 1'bX;
end 

// expected c46
initial
begin
	c46_expected = 1'bX;
end 

// expected c47
initial
begin
	c47_expected = 1'bX;
end 

// expected c48
initial
begin
	c48_expected = 1'bX;
end 

// expected c49
initial
begin
	c49_expected = 1'bX;
end 

// expected c50
initial
begin
	c50_expected = 1'bX;
end 

// expected c51
initial
begin
	c51_expected = 1'bX;
end 

// expected c52
initial
begin
	c52_expected = 1'bX;
end 

// expected c53
initial
begin
	c53_expected = 1'bX;
end 

// expected c54
initial
begin
	c54_expected = 1'bX;
end 

// expected c55
initial
begin
	c55_expected = 1'bX;
end 

// expected c56
initial
begin
	c56_expected = 1'bX;
end 

// expected c57
initial
begin
	c57_expected = 1'bX;
end 

// expected c58
initial
begin
	c58_expected = 1'bX;
end 

// expected c59
initial
begin
	c59_expected = 1'bX;
end 

// expected c60
initial
begin
	c60_expected = 1'bX;
end 

// expected c61
initial
begin
	c61_expected = 1'bX;
end 

// expected c62
initial
begin
	c62_expected = 1'bX;
end 

// expected c63
initial
begin
	c63_expected = 1'bX;
end 
// generate trigger
always @(c0_expected or c0 or c1_expected or c1 or c2_expected or c2 or c3_expected or c3 or c4_expected or c4 or c5_expected or c5 or c6_expected or c6 or c7_expected or c7 or c8_expected or c8 or c9_expected or c9 or c10_expected or c10 or c11_expected or c11 or c12_expected or c12 or c13_expected or c13 or c14_expected or c14 or c15_expected or c15 or c16_expected or c16 or c17_expected or c17 or c18_expected or c18 or c19_expected or c19 or c20_expected or c20 or c21_expected or c21 or c22_expected or c22 or c23_expected or c23 or c24_expected or c24 or c25_expected or c25 or c26_expected or c26 or c27_expected or c27 or c28_expected or c28 or c29_expected or c29 or c30_expected or c30 or c31_expected or c31 or c32_expected or c32 or c33_expected or c33 or c34_expected or c34 or c35_expected or c35 or c36_expected or c36 or c37_expected or c37 or c38_expected or c38 or c39_expected or c39 or c40_expected or c40 or c41_expected or c41 or c42_expected or c42 or c43_expected or c43 or c44_expected or c44 or c45_expected or c45 or c46_expected or c46 or c47_expected or c47 or c48_expected or c48 or c49_expected or c49 or c50_expected or c50 or c51_expected or c51 or c52_expected or c52 or c53_expected or c53 or c54_expected or c54 or c55_expected or c55 or c56_expected or c56 or c57_expected or c57 or c58_expected or c58 or c59_expected or c59 or c60_expected or c60 or c61_expected or c61 or c62_expected or c62 or c63_expected or c63)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c0 = %b | expected c1 = %b | expected c2 = %b | expected c3 = %b | expected c4 = %b | expected c5 = %b | expected c6 = %b | expected c7 = %b | expected c8 = %b | expected c9 = %b | expected c10 = %b | expected c11 = %b | expected c12 = %b | expected c13 = %b | expected c14 = %b | expected c15 = %b | expected c16 = %b | expected c17 = %b | expected c18 = %b | expected c19 = %b | expected c20 = %b | expected c21 = %b | expected c22 = %b | expected c23 = %b | expected c24 = %b | expected c25 = %b | expected c26 = %b | expected c27 = %b | expected c28 = %b | expected c29 = %b | expected c30 = %b | expected c31 = %b | expected c32 = %b | expected c33 = %b | expected c34 = %b | expected c35 = %b | expected c36 = %b | expected c37 = %b | expected c38 = %b | expected c39 = %b | expected c40 = %b | expected c41 = %b | expected c42 = %b | expected c43 = %b | expected c44 = %b | expected c45 = %b | expected c46 = %b | expected c47 = %b | expected c48 = %b | expected c49 = %b | expected c50 = %b | expected c51 = %b | expected c52 = %b | expected c53 = %b | expected c54 = %b | expected c55 = %b | expected c56 = %b | expected c57 = %b | expected c58 = %b | expected c59 = %b | expected c60 = %b | expected c61 = %b | expected c62 = %b | expected c63 = %b | ",c0_expected_prev,c1_expected_prev,c2_expected_prev,c3_expected_prev,c4_expected_prev,c5_expected_prev,c6_expected_prev,c7_expected_prev,c8_expected_prev,c9_expected_prev,c10_expected_prev,c11_expected_prev,c12_expected_prev,c13_expected_prev,c14_expected_prev,c15_expected_prev,c16_expected_prev,c17_expected_prev,c18_expected_prev,c19_expected_prev,c20_expected_prev,c21_expected_prev,c22_expected_prev,c23_expected_prev,c24_expected_prev,c25_expected_prev,c26_expected_prev,c27_expected_prev,c28_expected_prev,c29_expected_prev,c30_expected_prev,c31_expected_prev,c32_expected_prev,c33_expected_prev,c34_expected_prev,c35_expected_prev,c36_expected_prev,c37_expected_prev,c38_expected_prev,c39_expected_prev,c40_expected_prev,c41_expected_prev,c42_expected_prev,c43_expected_prev,c44_expected_prev,c45_expected_prev,c46_expected_prev,c47_expected_prev,c48_expected_prev,c49_expected_prev,c50_expected_prev,c51_expected_prev,c52_expected_prev,c53_expected_prev,c54_expected_prev,c55_expected_prev,c56_expected_prev,c57_expected_prev,c58_expected_prev,c59_expected_prev,c60_expected_prev,c61_expected_prev,c62_expected_prev,c63_expected_prev);
	$display("| real c0 = %b | real c1 = %b | real c2 = %b | real c3 = %b | real c4 = %b | real c5 = %b | real c6 = %b | real c7 = %b | real c8 = %b | real c9 = %b | real c10 = %b | real c11 = %b | real c12 = %b | real c13 = %b | real c14 = %b | real c15 = %b | real c16 = %b | real c17 = %b | real c18 = %b | real c19 = %b | real c20 = %b | real c21 = %b | real c22 = %b | real c23 = %b | real c24 = %b | real c25 = %b | real c26 = %b | real c27 = %b | real c28 = %b | real c29 = %b | real c30 = %b | real c31 = %b | real c32 = %b | real c33 = %b | real c34 = %b | real c35 = %b | real c36 = %b | real c37 = %b | real c38 = %b | real c39 = %b | real c40 = %b | real c41 = %b | real c42 = %b | real c43 = %b | real c44 = %b | real c45 = %b | real c46 = %b | real c47 = %b | real c48 = %b | real c49 = %b | real c50 = %b | real c51 = %b | real c52 = %b | real c53 = %b | real c54 = %b | real c55 = %b | real c56 = %b | real c57 = %b | real c58 = %b | real c59 = %b | real c60 = %b | real c61 = %b | real c62 = %b | real c63 = %b | ",c0_prev,c1_prev,c2_prev,c3_prev,c4_prev,c5_prev,c6_prev,c7_prev,c8_prev,c9_prev,c10_prev,c11_prev,c12_prev,c13_prev,c14_prev,c15_prev,c16_prev,c17_prev,c18_prev,c19_prev,c20_prev,c21_prev,c22_prev,c23_prev,c24_prev,c25_prev,c26_prev,c27_prev,c28_prev,c29_prev,c30_prev,c31_prev,c32_prev,c33_prev,c34_prev,c35_prev,c36_prev,c37_prev,c38_prev,c39_prev,c40_prev,c41_prev,c42_prev,c43_prev,c44_prev,c45_prev,c46_prev,c47_prev,c48_prev,c49_prev,c50_prev,c51_prev,c52_prev,c53_prev,c54_prev,c55_prev,c56_prev,c57_prev,c58_prev,c59_prev,c60_prev,c61_prev,c62_prev,c63_prev);
`endif
	if (
		( c0_expected_prev !== 1'bx ) && ( c0_prev !== c0_expected_prev )
		&& ((c0_expected_prev !== last_c0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c0_expected_prev);
		$display ("     Real value = %b", c0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c0_exp = c0_expected_prev;
	end
	if (
		( c1_expected_prev !== 1'bx ) && ( c1_prev !== c1_expected_prev )
		&& ((c1_expected_prev !== last_c1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c1_expected_prev);
		$display ("     Real value = %b", c1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_c1_exp = c1_expected_prev;
	end
	if (
		( c2_expected_prev !== 1'bx ) && ( c2_prev !== c2_expected_prev )
		&& ((c2_expected_prev !== last_c2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c2_expected_prev);
		$display ("     Real value = %b", c2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c2_exp = c2_expected_prev;
	end
	if (
		( c3_expected_prev !== 1'bx ) && ( c3_prev !== c3_expected_prev )
		&& ((c3_expected_prev !== last_c3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c3_expected_prev);
		$display ("     Real value = %b", c3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c3_exp = c3_expected_prev;
	end
	if (
		( c4_expected_prev !== 1'bx ) && ( c4_prev !== c4_expected_prev )
		&& ((c4_expected_prev !== last_c4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c4_expected_prev);
		$display ("     Real value = %b", c4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c4_exp = c4_expected_prev;
	end
	if (
		( c5_expected_prev !== 1'bx ) && ( c5_prev !== c5_expected_prev )
		&& ((c5_expected_prev !== last_c5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c5_expected_prev);
		$display ("     Real value = %b", c5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_c5_exp = c5_expected_prev;
	end
	if (
		( c6_expected_prev !== 1'bx ) && ( c6_prev !== c6_expected_prev )
		&& ((c6_expected_prev !== last_c6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c6_expected_prev);
		$display ("     Real value = %b", c6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_c6_exp = c6_expected_prev;
	end
	if (
		( c7_expected_prev !== 1'bx ) && ( c7_prev !== c7_expected_prev )
		&& ((c7_expected_prev !== last_c7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c7_expected_prev);
		$display ("     Real value = %b", c7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_c7_exp = c7_expected_prev;
	end
	if (
		( c8_expected_prev !== 1'bx ) && ( c8_prev !== c8_expected_prev )
		&& ((c8_expected_prev !== last_c8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c8_expected_prev);
		$display ("     Real value = %b", c8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_c8_exp = c8_expected_prev;
	end
	if (
		( c9_expected_prev !== 1'bx ) && ( c9_prev !== c9_expected_prev )
		&& ((c9_expected_prev !== last_c9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c9_expected_prev);
		$display ("     Real value = %b", c9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_c9_exp = c9_expected_prev;
	end
	if (
		( c10_expected_prev !== 1'bx ) && ( c10_prev !== c10_expected_prev )
		&& ((c10_expected_prev !== last_c10_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c10_expected_prev);
		$display ("     Real value = %b", c10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_c10_exp = c10_expected_prev;
	end
	if (
		( c11_expected_prev !== 1'bx ) && ( c11_prev !== c11_expected_prev )
		&& ((c11_expected_prev !== last_c11_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c11_expected_prev);
		$display ("     Real value = %b", c11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_c11_exp = c11_expected_prev;
	end
	if (
		( c12_expected_prev !== 1'bx ) && ( c12_prev !== c12_expected_prev )
		&& ((c12_expected_prev !== last_c12_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c12_expected_prev);
		$display ("     Real value = %b", c12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_c12_exp = c12_expected_prev;
	end
	if (
		( c13_expected_prev !== 1'bx ) && ( c13_prev !== c13_expected_prev )
		&& ((c13_expected_prev !== last_c13_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c13_expected_prev);
		$display ("     Real value = %b", c13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_c13_exp = c13_expected_prev;
	end
	if (
		( c14_expected_prev !== 1'bx ) && ( c14_prev !== c14_expected_prev )
		&& ((c14_expected_prev !== last_c14_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c14_expected_prev);
		$display ("     Real value = %b", c14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_c14_exp = c14_expected_prev;
	end
	if (
		( c15_expected_prev !== 1'bx ) && ( c15_prev !== c15_expected_prev )
		&& ((c15_expected_prev !== last_c15_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c15_expected_prev);
		$display ("     Real value = %b", c15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_c15_exp = c15_expected_prev;
	end
	if (
		( c16_expected_prev !== 1'bx ) && ( c16_prev !== c16_expected_prev )
		&& ((c16_expected_prev !== last_c16_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c16 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c16_expected_prev);
		$display ("     Real value = %b", c16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_c16_exp = c16_expected_prev;
	end
	if (
		( c17_expected_prev !== 1'bx ) && ( c17_prev !== c17_expected_prev )
		&& ((c17_expected_prev !== last_c17_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c17 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c17_expected_prev);
		$display ("     Real value = %b", c17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_c17_exp = c17_expected_prev;
	end
	if (
		( c18_expected_prev !== 1'bx ) && ( c18_prev !== c18_expected_prev )
		&& ((c18_expected_prev !== last_c18_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c18 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c18_expected_prev);
		$display ("     Real value = %b", c18_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_c18_exp = c18_expected_prev;
	end
	if (
		( c19_expected_prev !== 1'bx ) && ( c19_prev !== c19_expected_prev )
		&& ((c19_expected_prev !== last_c19_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c19 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c19_expected_prev);
		$display ("     Real value = %b", c19_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_c19_exp = c19_expected_prev;
	end
	if (
		( c20_expected_prev !== 1'bx ) && ( c20_prev !== c20_expected_prev )
		&& ((c20_expected_prev !== last_c20_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c20 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c20_expected_prev);
		$display ("     Real value = %b", c20_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_c20_exp = c20_expected_prev;
	end
	if (
		( c21_expected_prev !== 1'bx ) && ( c21_prev !== c21_expected_prev )
		&& ((c21_expected_prev !== last_c21_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c21_expected_prev);
		$display ("     Real value = %b", c21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_c21_exp = c21_expected_prev;
	end
	if (
		( c22_expected_prev !== 1'bx ) && ( c22_prev !== c22_expected_prev )
		&& ((c22_expected_prev !== last_c22_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c22_expected_prev);
		$display ("     Real value = %b", c22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_c22_exp = c22_expected_prev;
	end
	if (
		( c23_expected_prev !== 1'bx ) && ( c23_prev !== c23_expected_prev )
		&& ((c23_expected_prev !== last_c23_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c23 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c23_expected_prev);
		$display ("     Real value = %b", c23_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_c23_exp = c23_expected_prev;
	end
	if (
		( c24_expected_prev !== 1'bx ) && ( c24_prev !== c24_expected_prev )
		&& ((c24_expected_prev !== last_c24_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c24 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c24_expected_prev);
		$display ("     Real value = %b", c24_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_c24_exp = c24_expected_prev;
	end
	if (
		( c25_expected_prev !== 1'bx ) && ( c25_prev !== c25_expected_prev )
		&& ((c25_expected_prev !== last_c25_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c25_expected_prev);
		$display ("     Real value = %b", c25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_c25_exp = c25_expected_prev;
	end
	if (
		( c26_expected_prev !== 1'bx ) && ( c26_prev !== c26_expected_prev )
		&& ((c26_expected_prev !== last_c26_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c26 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c26_expected_prev);
		$display ("     Real value = %b", c26_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_c26_exp = c26_expected_prev;
	end
	if (
		( c27_expected_prev !== 1'bx ) && ( c27_prev !== c27_expected_prev )
		&& ((c27_expected_prev !== last_c27_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c27 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c27_expected_prev);
		$display ("     Real value = %b", c27_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_c27_exp = c27_expected_prev;
	end
	if (
		( c28_expected_prev !== 1'bx ) && ( c28_prev !== c28_expected_prev )
		&& ((c28_expected_prev !== last_c28_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c28 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c28_expected_prev);
		$display ("     Real value = %b", c28_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_c28_exp = c28_expected_prev;
	end
	if (
		( c29_expected_prev !== 1'bx ) && ( c29_prev !== c29_expected_prev )
		&& ((c29_expected_prev !== last_c29_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c29 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c29_expected_prev);
		$display ("     Real value = %b", c29_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_c29_exp = c29_expected_prev;
	end
	if (
		( c30_expected_prev !== 1'bx ) && ( c30_prev !== c30_expected_prev )
		&& ((c30_expected_prev !== last_c30_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c30 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c30_expected_prev);
		$display ("     Real value = %b", c30_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_c30_exp = c30_expected_prev;
	end
	if (
		( c31_expected_prev !== 1'bx ) && ( c31_prev !== c31_expected_prev )
		&& ((c31_expected_prev !== last_c31_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c31 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c31_expected_prev);
		$display ("     Real value = %b", c31_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_c31_exp = c31_expected_prev;
	end
	if (
		( c32_expected_prev !== 1'bx ) && ( c32_prev !== c32_expected_prev )
		&& ((c32_expected_prev !== last_c32_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c32 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c32_expected_prev);
		$display ("     Real value = %b", c32_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_c32_exp = c32_expected_prev;
	end
	if (
		( c33_expected_prev !== 1'bx ) && ( c33_prev !== c33_expected_prev )
		&& ((c33_expected_prev !== last_c33_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c33 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c33_expected_prev);
		$display ("     Real value = %b", c33_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_c33_exp = c33_expected_prev;
	end
	if (
		( c34_expected_prev !== 1'bx ) && ( c34_prev !== c34_expected_prev )
		&& ((c34_expected_prev !== last_c34_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c34 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c34_expected_prev);
		$display ("     Real value = %b", c34_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_c34_exp = c34_expected_prev;
	end
	if (
		( c35_expected_prev !== 1'bx ) && ( c35_prev !== c35_expected_prev )
		&& ((c35_expected_prev !== last_c35_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c35 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c35_expected_prev);
		$display ("     Real value = %b", c35_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_c35_exp = c35_expected_prev;
	end
	if (
		( c36_expected_prev !== 1'bx ) && ( c36_prev !== c36_expected_prev )
		&& ((c36_expected_prev !== last_c36_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c36 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c36_expected_prev);
		$display ("     Real value = %b", c36_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_c36_exp = c36_expected_prev;
	end
	if (
		( c37_expected_prev !== 1'bx ) && ( c37_prev !== c37_expected_prev )
		&& ((c37_expected_prev !== last_c37_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c37 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c37_expected_prev);
		$display ("     Real value = %b", c37_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_c37_exp = c37_expected_prev;
	end
	if (
		( c38_expected_prev !== 1'bx ) && ( c38_prev !== c38_expected_prev )
		&& ((c38_expected_prev !== last_c38_exp) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c38 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c38_expected_prev);
		$display ("     Real value = %b", c38_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_c38_exp = c38_expected_prev;
	end
	if (
		( c39_expected_prev !== 1'bx ) && ( c39_prev !== c39_expected_prev )
		&& ((c39_expected_prev !== last_c39_exp) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c39 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c39_expected_prev);
		$display ("     Real value = %b", c39_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_c39_exp = c39_expected_prev;
	end
	if (
		( c40_expected_prev !== 1'bx ) && ( c40_prev !== c40_expected_prev )
		&& ((c40_expected_prev !== last_c40_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c40 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c40_expected_prev);
		$display ("     Real value = %b", c40_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_c40_exp = c40_expected_prev;
	end
	if (
		( c41_expected_prev !== 1'bx ) && ( c41_prev !== c41_expected_prev )
		&& ((c41_expected_prev !== last_c41_exp) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c41 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c41_expected_prev);
		$display ("     Real value = %b", c41_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_c41_exp = c41_expected_prev;
	end
	if (
		( c42_expected_prev !== 1'bx ) && ( c42_prev !== c42_expected_prev )
		&& ((c42_expected_prev !== last_c42_exp) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c42 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c42_expected_prev);
		$display ("     Real value = %b", c42_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_c42_exp = c42_expected_prev;
	end
	if (
		( c43_expected_prev !== 1'bx ) && ( c43_prev !== c43_expected_prev )
		&& ((c43_expected_prev !== last_c43_exp) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c43 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c43_expected_prev);
		$display ("     Real value = %b", c43_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_c43_exp = c43_expected_prev;
	end
	if (
		( c44_expected_prev !== 1'bx ) && ( c44_prev !== c44_expected_prev )
		&& ((c44_expected_prev !== last_c44_exp) ||
			on_first_change[45])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c44 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c44_expected_prev);
		$display ("     Real value = %b", c44_prev);
		nummismatches = nummismatches + 1;
		on_first_change[45] = 1'b0;
		last_c44_exp = c44_expected_prev;
	end
	if (
		( c45_expected_prev !== 1'bx ) && ( c45_prev !== c45_expected_prev )
		&& ((c45_expected_prev !== last_c45_exp) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c45 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c45_expected_prev);
		$display ("     Real value = %b", c45_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_c45_exp = c45_expected_prev;
	end
	if (
		( c46_expected_prev !== 1'bx ) && ( c46_prev !== c46_expected_prev )
		&& ((c46_expected_prev !== last_c46_exp) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c46 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c46_expected_prev);
		$display ("     Real value = %b", c46_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_c46_exp = c46_expected_prev;
	end
	if (
		( c47_expected_prev !== 1'bx ) && ( c47_prev !== c47_expected_prev )
		&& ((c47_expected_prev !== last_c47_exp) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c47 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c47_expected_prev);
		$display ("     Real value = %b", c47_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_c47_exp = c47_expected_prev;
	end
	if (
		( c48_expected_prev !== 1'bx ) && ( c48_prev !== c48_expected_prev )
		&& ((c48_expected_prev !== last_c48_exp) ||
			on_first_change[49])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c48 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c48_expected_prev);
		$display ("     Real value = %b", c48_prev);
		nummismatches = nummismatches + 1;
		on_first_change[49] = 1'b0;
		last_c48_exp = c48_expected_prev;
	end
	if (
		( c49_expected_prev !== 1'bx ) && ( c49_prev !== c49_expected_prev )
		&& ((c49_expected_prev !== last_c49_exp) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c49 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c49_expected_prev);
		$display ("     Real value = %b", c49_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_c49_exp = c49_expected_prev;
	end
	if (
		( c50_expected_prev !== 1'bx ) && ( c50_prev !== c50_expected_prev )
		&& ((c50_expected_prev !== last_c50_exp) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c50 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c50_expected_prev);
		$display ("     Real value = %b", c50_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_c50_exp = c50_expected_prev;
	end
	if (
		( c51_expected_prev !== 1'bx ) && ( c51_prev !== c51_expected_prev )
		&& ((c51_expected_prev !== last_c51_exp) ||
			on_first_change[52])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c51 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c51_expected_prev);
		$display ("     Real value = %b", c51_prev);
		nummismatches = nummismatches + 1;
		on_first_change[52] = 1'b0;
		last_c51_exp = c51_expected_prev;
	end
	if (
		( c52_expected_prev !== 1'bx ) && ( c52_prev !== c52_expected_prev )
		&& ((c52_expected_prev !== last_c52_exp) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c52 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c52_expected_prev);
		$display ("     Real value = %b", c52_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_c52_exp = c52_expected_prev;
	end
	if (
		( c53_expected_prev !== 1'bx ) && ( c53_prev !== c53_expected_prev )
		&& ((c53_expected_prev !== last_c53_exp) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c53 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c53_expected_prev);
		$display ("     Real value = %b", c53_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_c53_exp = c53_expected_prev;
	end
	if (
		( c54_expected_prev !== 1'bx ) && ( c54_prev !== c54_expected_prev )
		&& ((c54_expected_prev !== last_c54_exp) ||
			on_first_change[55])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c54 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c54_expected_prev);
		$display ("     Real value = %b", c54_prev);
		nummismatches = nummismatches + 1;
		on_first_change[55] = 1'b0;
		last_c54_exp = c54_expected_prev;
	end
	if (
		( c55_expected_prev !== 1'bx ) && ( c55_prev !== c55_expected_prev )
		&& ((c55_expected_prev !== last_c55_exp) ||
			on_first_change[56])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c55 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c55_expected_prev);
		$display ("     Real value = %b", c55_prev);
		nummismatches = nummismatches + 1;
		on_first_change[56] = 1'b0;
		last_c55_exp = c55_expected_prev;
	end
	if (
		( c56_expected_prev !== 1'bx ) && ( c56_prev !== c56_expected_prev )
		&& ((c56_expected_prev !== last_c56_exp) ||
			on_first_change[57])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c56 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c56_expected_prev);
		$display ("     Real value = %b", c56_prev);
		nummismatches = nummismatches + 1;
		on_first_change[57] = 1'b0;
		last_c56_exp = c56_expected_prev;
	end
	if (
		( c57_expected_prev !== 1'bx ) && ( c57_prev !== c57_expected_prev )
		&& ((c57_expected_prev !== last_c57_exp) ||
			on_first_change[58])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c57 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c57_expected_prev);
		$display ("     Real value = %b", c57_prev);
		nummismatches = nummismatches + 1;
		on_first_change[58] = 1'b0;
		last_c57_exp = c57_expected_prev;
	end
	if (
		( c58_expected_prev !== 1'bx ) && ( c58_prev !== c58_expected_prev )
		&& ((c58_expected_prev !== last_c58_exp) ||
			on_first_change[59])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c58 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c58_expected_prev);
		$display ("     Real value = %b", c58_prev);
		nummismatches = nummismatches + 1;
		on_first_change[59] = 1'b0;
		last_c58_exp = c58_expected_prev;
	end
	if (
		( c59_expected_prev !== 1'bx ) && ( c59_prev !== c59_expected_prev )
		&& ((c59_expected_prev !== last_c59_exp) ||
			on_first_change[60])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c59 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c59_expected_prev);
		$display ("     Real value = %b", c59_prev);
		nummismatches = nummismatches + 1;
		on_first_change[60] = 1'b0;
		last_c59_exp = c59_expected_prev;
	end
	if (
		( c60_expected_prev !== 1'bx ) && ( c60_prev !== c60_expected_prev )
		&& ((c60_expected_prev !== last_c60_exp) ||
			on_first_change[61])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c60 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c60_expected_prev);
		$display ("     Real value = %b", c60_prev);
		nummismatches = nummismatches + 1;
		on_first_change[61] = 1'b0;
		last_c60_exp = c60_expected_prev;
	end
	if (
		( c61_expected_prev !== 1'bx ) && ( c61_prev !== c61_expected_prev )
		&& ((c61_expected_prev !== last_c61_exp) ||
			on_first_change[62])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c61 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c61_expected_prev);
		$display ("     Real value = %b", c61_prev);
		nummismatches = nummismatches + 1;
		on_first_change[62] = 1'b0;
		last_c61_exp = c61_expected_prev;
	end
	if (
		( c62_expected_prev !== 1'bx ) && ( c62_prev !== c62_expected_prev )
		&& ((c62_expected_prev !== last_c62_exp) ||
			on_first_change[63])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c62 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c62_expected_prev);
		$display ("     Real value = %b", c62_prev);
		nummismatches = nummismatches + 1;
		on_first_change[63] = 1'b0;
		last_c62_exp = c62_expected_prev;
	end
	if (
		( c63_expected_prev !== 1'bx ) && ( c63_prev !== c63_expected_prev )
		&& ((c63_expected_prev !== last_c63_exp) ||
			on_first_change[64])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c63 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c63_expected_prev);
		$display ("     Real value = %b", c63_prev);
		nummismatches = nummismatches + 1;
		on_first_change[64] = 1'b0;
		last_c63_exp = c63_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PRESENT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ik0;
reg ik1;
reg ik2;
reg ik3;
reg ik4;
reg ik5;
reg ik6;
reg ik7;
reg ik8;
reg ik9;
reg ik10;
reg ik11;
reg ik12;
reg ik13;
reg ik14;
reg ik15;
reg ik16;
reg ik17;
reg ik18;
reg ik19;
reg ik20;
reg ik21;
reg ik22;
reg ik23;
reg ik24;
reg ik25;
reg ik26;
reg ik27;
reg ik28;
reg ik29;
reg ik30;
reg ik31;
reg ik32;
reg ik33;
reg ik34;
reg ik35;
reg ik36;
reg ik37;
reg ik38;
reg ik39;
reg ik40;
reg ik41;
reg ik42;
reg ik43;
reg ik44;
reg ik45;
reg ik46;
reg ik47;
reg ik48;
reg ik49;
reg ik50;
reg ik51;
reg ik52;
reg ik53;
reg ik54;
reg ik55;
reg ik56;
reg ik57;
reg ik58;
reg ik59;
reg ik60;
reg ik61;
reg ik62;
reg ik63;
reg ik64;
reg ik65;
reg ik66;
reg ik67;
reg ik68;
reg ik69;
reg ik70;
reg ik71;
reg ik72;
reg ik73;
reg ik74;
reg ik75;
reg ik76;
reg ik77;
reg ik78;
reg ik79;
reg p0;
reg p1;
reg p2;
reg p3;
reg p4;
reg p5;
reg p6;
reg p7;
reg p8;
reg p9;
reg p10;
reg p11;
reg p12;
reg p13;
reg p14;
reg p15;
reg p16;
reg p17;
reg p18;
reg p19;
reg p20;
reg p21;
reg p22;
reg p23;
reg p24;
reg p25;
reg p26;
reg p27;
reg p28;
reg p29;
reg p30;
reg p31;
reg p32;
reg p33;
reg p34;
reg p35;
reg p36;
reg p37;
reg p38;
reg p39;
reg p40;
reg p41;
reg p42;
reg p43;
reg p44;
reg p45;
reg p46;
reg p47;
reg p48;
reg p49;
reg p50;
reg p51;
reg p52;
reg p53;
reg p54;
reg p55;
reg p56;
reg p57;
reg p58;
reg p59;
reg p60;
reg p61;
reg p62;
reg p63;
// wires                                               
wire c0;
wire c1;
wire c2;
wire c3;
wire c4;
wire c5;
wire c6;
wire c7;
wire c8;
wire c9;
wire c10;
wire c11;
wire c12;
wire c13;
wire c14;
wire c15;
wire c16;
wire c17;
wire c18;
wire c19;
wire c20;
wire c21;
wire c22;
wire c23;
wire c24;
wire c25;
wire c26;
wire c27;
wire c28;
wire c29;
wire c30;
wire c31;
wire c32;
wire c33;
wire c34;
wire c35;
wire c36;
wire c37;
wire c38;
wire c39;
wire c40;
wire c41;
wire c42;
wire c43;
wire c44;
wire c45;
wire c46;
wire c47;
wire c48;
wire c49;
wire c50;
wire c51;
wire c52;
wire c53;
wire c54;
wire c55;
wire c56;
wire c57;
wire c58;
wire c59;
wire c60;
wire c61;
wire c62;
wire c63;

wire sampler;                             

// assign statements (if any)                          
PRESENT i1 (
// port map - connection between master ports and signals/registers   
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.c5(c5),
	.c6(c6),
	.c7(c7),
	.c8(c8),
	.c9(c9),
	.c10(c10),
	.c11(c11),
	.c12(c12),
	.c13(c13),
	.c14(c14),
	.c15(c15),
	.c16(c16),
	.c17(c17),
	.c18(c18),
	.c19(c19),
	.c20(c20),
	.c21(c21),
	.c22(c22),
	.c23(c23),
	.c24(c24),
	.c25(c25),
	.c26(c26),
	.c27(c27),
	.c28(c28),
	.c29(c29),
	.c30(c30),
	.c31(c31),
	.c32(c32),
	.c33(c33),
	.c34(c34),
	.c35(c35),
	.c36(c36),
	.c37(c37),
	.c38(c38),
	.c39(c39),
	.c40(c40),
	.c41(c41),
	.c42(c42),
	.c43(c43),
	.c44(c44),
	.c45(c45),
	.c46(c46),
	.c47(c47),
	.c48(c48),
	.c49(c49),
	.c50(c50),
	.c51(c51),
	.c52(c52),
	.c53(c53),
	.c54(c54),
	.c55(c55),
	.c56(c56),
	.c57(c57),
	.c58(c58),
	.c59(c59),
	.c60(c60),
	.c61(c61),
	.c62(c62),
	.c63(c63),
	.ik0(ik0),
	.ik1(ik1),
	.ik2(ik2),
	.ik3(ik3),
	.ik4(ik4),
	.ik5(ik5),
	.ik6(ik6),
	.ik7(ik7),
	.ik8(ik8),
	.ik9(ik9),
	.ik10(ik10),
	.ik11(ik11),
	.ik12(ik12),
	.ik13(ik13),
	.ik14(ik14),
	.ik15(ik15),
	.ik16(ik16),
	.ik17(ik17),
	.ik18(ik18),
	.ik19(ik19),
	.ik20(ik20),
	.ik21(ik21),
	.ik22(ik22),
	.ik23(ik23),
	.ik24(ik24),
	.ik25(ik25),
	.ik26(ik26),
	.ik27(ik27),
	.ik28(ik28),
	.ik29(ik29),
	.ik30(ik30),
	.ik31(ik31),
	.ik32(ik32),
	.ik33(ik33),
	.ik34(ik34),
	.ik35(ik35),
	.ik36(ik36),
	.ik37(ik37),
	.ik38(ik38),
	.ik39(ik39),
	.ik40(ik40),
	.ik41(ik41),
	.ik42(ik42),
	.ik43(ik43),
	.ik44(ik44),
	.ik45(ik45),
	.ik46(ik46),
	.ik47(ik47),
	.ik48(ik48),
	.ik49(ik49),
	.ik50(ik50),
	.ik51(ik51),
	.ik52(ik52),
	.ik53(ik53),
	.ik54(ik54),
	.ik55(ik55),
	.ik56(ik56),
	.ik57(ik57),
	.ik58(ik58),
	.ik59(ik59),
	.ik60(ik60),
	.ik61(ik61),
	.ik62(ik62),
	.ik63(ik63),
	.ik64(ik64),
	.ik65(ik65),
	.ik66(ik66),
	.ik67(ik67),
	.ik68(ik68),
	.ik69(ik69),
	.ik70(ik70),
	.ik71(ik71),
	.ik72(ik72),
	.ik73(ik73),
	.ik74(ik74),
	.ik75(ik75),
	.ik76(ik76),
	.ik77(ik77),
	.ik78(ik78),
	.ik79(ik79),
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.p5(p5),
	.p6(p6),
	.p7(p7),
	.p8(p8),
	.p9(p9),
	.p10(p10),
	.p11(p11),
	.p12(p12),
	.p13(p13),
	.p14(p14),
	.p15(p15),
	.p16(p16),
	.p17(p17),
	.p18(p18),
	.p19(p19),
	.p20(p20),
	.p21(p21),
	.p22(p22),
	.p23(p23),
	.p24(p24),
	.p25(p25),
	.p26(p26),
	.p27(p27),
	.p28(p28),
	.p29(p29),
	.p30(p30),
	.p31(p31),
	.p32(p32),
	.p33(p33),
	.p34(p34),
	.p35(p35),
	.p36(p36),
	.p37(p37),
	.p38(p38),
	.p39(p39),
	.p40(p40),
	.p41(p41),
	.p42(p42),
	.p43(p43),
	.p44(p44),
	.p45(p45),
	.p46(p46),
	.p47(p47),
	.p48(p48),
	.p49(p49),
	.p50(p50),
	.p51(p51),
	.p52(p52),
	.p53(p53),
	.p54(p54),
	.p55(p55),
	.p56(p56),
	.p57(p57),
	.p58(p58),
	.p59(p59),
	.p60(p60),
	.p61(p61),
	.p62(p62),
	.p63(p63)
);

// ik0
initial
begin
	ik0 = 1'b1;
end 

// ik1
initial
begin
	ik1 = 1'b0;
end 

// ik2
initial
begin
	ik2 = 1'b0;
end 

// ik3
initial
begin
	ik3 = 1'b0;
end 

// ik4
initial
begin
	ik4 = 1'b0;
end 

// ik5
initial
begin
	ik5 = 1'b0;
end 

// ik6
initial
begin
	ik6 = 1'b0;
end 

// ik7
initial
begin
	ik7 = 1'b0;
end 

// ik8
initial
begin
	ik8 = 1'b0;
end 

// ik9
initial
begin
	ik9 = 1'b0;
end 

// ik10
initial
begin
	ik10 = 1'b0;
end 

// ik11
initial
begin
	ik11 = 1'b0;
end 

// ik12
initial
begin
	ik12 = 1'b0;
end 

// ik13
initial
begin
	ik13 = 1'b0;
end 

// ik14
initial
begin
	ik14 = 1'b0;
end 

// ik15
initial
begin
	ik15 = 1'b0;
end 

// ik16
initial
begin
	ik16 = 1'b0;
end 

// ik17
initial
begin
	ik17 = 1'b0;
end 

// ik18
initial
begin
	ik18 = 1'b0;
end 

// ik19
initial
begin
	ik19 = 1'b0;
end 

// ik20
initial
begin
	ik20 = 1'b0;
end 

// ik21
initial
begin
	ik21 = 1'b0;
end 

// ik22
initial
begin
	ik22 = 1'b0;
end 

// ik23
initial
begin
	ik23 = 1'b0;
end 

// ik24
initial
begin
	ik24 = 1'b0;
end 

// ik25
initial
begin
	ik25 = 1'b0;
end 

// ik26
initial
begin
	ik26 = 1'b0;
end 

// ik27
initial
begin
	ik27 = 1'b0;
end 

// ik28
initial
begin
	ik28 = 1'b0;
end 

// ik29
initial
begin
	ik29 = 1'b0;
end 

// ik30
initial
begin
	ik30 = 1'b0;
end 

// ik31
initial
begin
	ik31 = 1'b0;
end 

// ik32
initial
begin
	ik32 = 1'b0;
end 

// ik33
initial
begin
	ik33 = 1'b0;
end 

// ik34
initial
begin
	ik34 = 1'b0;
end 

// ik35
initial
begin
	ik35 = 1'b0;
end 

// ik36
initial
begin
	ik36 = 1'b0;
end 

// ik37
initial
begin
	ik37 = 1'b0;
end 

// ik38
initial
begin
	ik38 = 1'b0;
end 

// ik39
initial
begin
	ik39 = 1'b0;
end 

// ik40
initial
begin
	ik40 = 1'b0;
end 

// ik41
initial
begin
	ik41 = 1'b0;
end 

// ik42
initial
begin
	ik42 = 1'b0;
end 

// ik43
initial
begin
	ik43 = 1'b0;
end 

// ik44
initial
begin
	ik44 = 1'b0;
end 

// ik45
initial
begin
	ik45 = 1'b0;
end 

// ik46
initial
begin
	ik46 = 1'b0;
end 

// ik47
initial
begin
	ik47 = 1'b0;
end 

// ik48
initial
begin
	ik48 = 1'b0;
end 

// ik49
initial
begin
	ik49 = 1'b0;
end 

// ik50
initial
begin
	ik50 = 1'b0;
end 

// ik51
initial
begin
	ik51 = 1'b0;
end 

// ik52
initial
begin
	ik52 = 1'b0;
end 

// ik53
initial
begin
	ik53 = 1'b0;
end 

// ik54
initial
begin
	ik54 = 1'b0;
end 

// ik55
initial
begin
	ik55 = 1'b0;
end 

// ik56
initial
begin
	ik56 = 1'b0;
end 

// ik57
initial
begin
	ik57 = 1'b0;
end 

// ik58
initial
begin
	ik58 = 1'b0;
end 

// ik59
initial
begin
	ik59 = 1'b0;
end 

// ik60
initial
begin
	ik60 = 1'b0;
end 

// ik61
initial
begin
	ik61 = 1'b0;
end 

// ik62
initial
begin
	ik62 = 1'b0;
end 

// ik63
initial
begin
	ik63 = 1'b0;
end 

// ik64
initial
begin
	ik64 = 1'b0;
end 

// ik65
initial
begin
	ik65 = 1'b0;
end 

// ik66
initial
begin
	ik66 = 1'b0;
end 

// ik67
initial
begin
	ik67 = 1'b0;
end 

// ik68
initial
begin
	ik68 = 1'b1;
end 

// ik69
initial
begin
	ik69 = 1'b0;
end 

// ik70
initial
begin
	ik70 = 1'b0;
end 

// ik71
initial
begin
	ik71 = 1'b0;
end 

// ik72
initial
begin
	ik72 = 1'b0;
end 

// ik73
initial
begin
	ik73 = 1'b0;
end 

// ik74
initial
begin
	ik74 = 1'b0;
end 

// ik75
initial
begin
	ik75 = 1'b0;
end 

// ik76
initial
begin
	ik76 = 1'b0;
end 

// ik77
initial
begin
	ik77 = 1'b0;
end 

// ik78
initial
begin
	ik78 = 1'b0;
end 

// ik79
initial
begin
	ik79 = 1'b0;
end 

// p0
initial
begin
	p0 = 1'b1;
end 

// p1
initial
begin
	p1 = 1'b0;
end 

// p2
initial
begin
	p2 = 1'b0;
end 

// p3
initial
begin
	p3 = 1'b0;
end 

// p4
initial
begin
	p4 = 1'b0;
end 

// p5
initial
begin
	p5 = 1'b0;
end 

// p6
initial
begin
	p6 = 1'b0;
end 

// p7
initial
begin
	p7 = 1'b0;
end 

// p8
initial
begin
	p8 = 1'b0;
end 

// p9
initial
begin
	p9 = 1'b0;
end 

// p10
initial
begin
	p10 = 1'b0;
end 

// p11
initial
begin
	p11 = 1'b0;
end 

// p12
initial
begin
	p12 = 1'b0;
end 

// p13
initial
begin
	p13 = 1'b0;
end 

// p14
initial
begin
	p14 = 1'b0;
end 

// p15
initial
begin
	p15 = 1'b0;
end 

// p16
initial
begin
	p16 = 1'b0;
end 

// p17
initial
begin
	p17 = 1'b0;
end 

// p18
initial
begin
	p18 = 1'b0;
end 

// p19
initial
begin
	p19 = 1'b0;
end 

// p20
initial
begin
	p20 = 1'b0;
end 

// p21
initial
begin
	p21 = 1'b0;
end 

// p22
initial
begin
	p22 = 1'b0;
end 

// p23
initial
begin
	p23 = 1'b0;
end 

// p24
initial
begin
	p24 = 1'b0;
end 

// p25
initial
begin
	p25 = 1'b0;
end 

// p26
initial
begin
	p26 = 1'b0;
end 

// p27
initial
begin
	p27 = 1'b0;
end 

// p28
initial
begin
	p28 = 1'b0;
end 

// p29
initial
begin
	p29 = 1'b0;
end 

// p30
initial
begin
	p30 = 1'b0;
end 

// p31
initial
begin
	p31 = 1'b0;
end 

// p32
initial
begin
	p32 = 1'b0;
end 

// p33
initial
begin
	p33 = 1'b0;
end 

// p34
initial
begin
	p34 = 1'b0;
end 

// p35
initial
begin
	p35 = 1'b0;
end 

// p36
initial
begin
	p36 = 1'b0;
end 

// p37
initial
begin
	p37 = 1'b0;
end 

// p38
initial
begin
	p38 = 1'b0;
end 

// p39
initial
begin
	p39 = 1'b0;
end 

// p40
initial
begin
	p40 = 1'b0;
end 

// p41
initial
begin
	p41 = 1'b0;
end 

// p42
initial
begin
	p42 = 1'b0;
end 

// p43
initial
begin
	p43 = 1'b0;
end 

// p44
initial
begin
	p44 = 1'b0;
end 

// p45
initial
begin
	p45 = 1'b0;
end 

// p46
initial
begin
	p46 = 1'b0;
end 

// p47
initial
begin
	p47 = 1'b0;
end 

// p48
initial
begin
	p48 = 1'b0;
end 

// p49
initial
begin
	p49 = 1'b0;
end 

// p50
initial
begin
	p50 = 1'b0;
end 

// p51
initial
begin
	p51 = 1'b0;
end 

// p52
initial
begin
	p52 = 1'b0;
end 

// p53
initial
begin
	p53 = 1'b0;
end 

// p54
initial
begin
	p54 = 1'b0;
end 

// p55
initial
begin
	p55 = 1'b0;
end 

// p56
initial
begin
	p56 = 1'b1;
end 

// p57
initial
begin
	p57 = 1'b0;
end 

// p58
initial
begin
	p58 = 1'b0;
end 

// p59
initial
begin
	p59 = 1'b0;
end 

// p60
initial
begin
	p60 = 1'b0;
end 

// p61
initial
begin
	p61 = 1'b0;
end 

// p62
initial
begin
	p62 = 1'b0;
end 

// p63
initial
begin
	p63 = 1'b0;
end 

PRESENT_vlg_sample_tst tb_sample (
	.ik0(ik0),
	.ik1(ik1),
	.ik2(ik2),
	.ik3(ik3),
	.ik4(ik4),
	.ik5(ik5),
	.ik6(ik6),
	.ik7(ik7),
	.ik8(ik8),
	.ik9(ik9),
	.ik10(ik10),
	.ik11(ik11),
	.ik12(ik12),
	.ik13(ik13),
	.ik14(ik14),
	.ik15(ik15),
	.ik16(ik16),
	.ik17(ik17),
	.ik18(ik18),
	.ik19(ik19),
	.ik20(ik20),
	.ik21(ik21),
	.ik22(ik22),
	.ik23(ik23),
	.ik24(ik24),
	.ik25(ik25),
	.ik26(ik26),
	.ik27(ik27),
	.ik28(ik28),
	.ik29(ik29),
	.ik30(ik30),
	.ik31(ik31),
	.ik32(ik32),
	.ik33(ik33),
	.ik34(ik34),
	.ik35(ik35),
	.ik36(ik36),
	.ik37(ik37),
	.ik38(ik38),
	.ik39(ik39),
	.ik40(ik40),
	.ik41(ik41),
	.ik42(ik42),
	.ik43(ik43),
	.ik44(ik44),
	.ik45(ik45),
	.ik46(ik46),
	.ik47(ik47),
	.ik48(ik48),
	.ik49(ik49),
	.ik50(ik50),
	.ik51(ik51),
	.ik52(ik52),
	.ik53(ik53),
	.ik54(ik54),
	.ik55(ik55),
	.ik56(ik56),
	.ik57(ik57),
	.ik58(ik58),
	.ik59(ik59),
	.ik60(ik60),
	.ik61(ik61),
	.ik62(ik62),
	.ik63(ik63),
	.ik64(ik64),
	.ik65(ik65),
	.ik66(ik66),
	.ik67(ik67),
	.ik68(ik68),
	.ik69(ik69),
	.ik70(ik70),
	.ik71(ik71),
	.ik72(ik72),
	.ik73(ik73),
	.ik74(ik74),
	.ik75(ik75),
	.ik76(ik76),
	.ik77(ik77),
	.ik78(ik78),
	.ik79(ik79),
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.p5(p5),
	.p6(p6),
	.p7(p7),
	.p8(p8),
	.p9(p9),
	.p10(p10),
	.p11(p11),
	.p12(p12),
	.p13(p13),
	.p14(p14),
	.p15(p15),
	.p16(p16),
	.p17(p17),
	.p18(p18),
	.p19(p19),
	.p20(p20),
	.p21(p21),
	.p22(p22),
	.p23(p23),
	.p24(p24),
	.p25(p25),
	.p26(p26),
	.p27(p27),
	.p28(p28),
	.p29(p29),
	.p30(p30),
	.p31(p31),
	.p32(p32),
	.p33(p33),
	.p34(p34),
	.p35(p35),
	.p36(p36),
	.p37(p37),
	.p38(p38),
	.p39(p39),
	.p40(p40),
	.p41(p41),
	.p42(p42),
	.p43(p43),
	.p44(p44),
	.p45(p45),
	.p46(p46),
	.p47(p47),
	.p48(p48),
	.p49(p49),
	.p50(p50),
	.p51(p51),
	.p52(p52),
	.p53(p53),
	.p54(p54),
	.p55(p55),
	.p56(p56),
	.p57(p57),
	.p58(p58),
	.p59(p59),
	.p60(p60),
	.p61(p61),
	.p62(p62),
	.p63(p63),
	.sampler_tx(sampler)
);

PRESENT_vlg_check_tst tb_out(
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.c5(c5),
	.c6(c6),
	.c7(c7),
	.c8(c8),
	.c9(c9),
	.c10(c10),
	.c11(c11),
	.c12(c12),
	.c13(c13),
	.c14(c14),
	.c15(c15),
	.c16(c16),
	.c17(c17),
	.c18(c18),
	.c19(c19),
	.c20(c20),
	.c21(c21),
	.c22(c22),
	.c23(c23),
	.c24(c24),
	.c25(c25),
	.c26(c26),
	.c27(c27),
	.c28(c28),
	.c29(c29),
	.c30(c30),
	.c31(c31),
	.c32(c32),
	.c33(c33),
	.c34(c34),
	.c35(c35),
	.c36(c36),
	.c37(c37),
	.c38(c38),
	.c39(c39),
	.c40(c40),
	.c41(c41),
	.c42(c42),
	.c43(c43),
	.c44(c44),
	.c45(c45),
	.c46(c46),
	.c47(c47),
	.c48(c48),
	.c49(c49),
	.c50(c50),
	.c51(c51),
	.c52(c52),
	.c53(c53),
	.c54(c54),
	.c55(c55),
	.c56(c56),
	.c57(c57),
	.c58(c58),
	.c59(c59),
	.c60(c60),
	.c61(c61),
	.c62(c62),
	.c63(c63),
	.sampler_rx(sampler)
);
endmodule

